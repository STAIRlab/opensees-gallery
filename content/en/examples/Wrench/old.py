
title = "CST Sample Problem (Logan #8.22)"

#              OO+O+O
#             O+++OO
#             O+OO+O
#            O+O+O+O
#            OOO+OO
#            OO+O+O
#           O+O+OO
#           OO+O+O
#          O+O+O+O
#          OO+O+O
#         O+O+O+O
#         O+OO+O
#        O+O+OO
#        OO+O+O
#      OOOOOOO+O
#   O+O+OOO+OO+OO
# OOOOOOOOOOOOOO+OO
# OOOOOOOO+OOOO+OOO
# OOOOOO+OO+OOOOOOO
# OOOOO       OOOOO
#  O+OO       OOOO
#   OOO       OOO
#

import opensees.openseespy as ops



def create_wrench():
    model = ops.Model(ndm=2, ndf=2)

    # Material properties
    #                                       E       nu
    model.nDMaterial("ElasticIsotropic", 1, 200000, 0.25) # t=10



    model.node(  1,   0.0    ,  50)
    model.node(  2,  20.0    ,  10)
    model.node(  3,  40.0    ,   0)
    model.node(  4,  40.0    ,  50)
    model.node(  5,  55.0    ,  70)
    model.node(  6,  95.0    ,  70)
    model.node(  7, 115.0    ,  50)
    model.node(  8, 115.0    ,   0)
    model.node(  9, 135.0    ,  10)
    model.node( 10, 155.0    ,  50)
    model.node( 11, 155.0    ,  90)
    model.node( 12, 115.0    , 160)
    model.node( 13, 170.0    , 404)
    model.node( 14, 122.0    , 404)
    model.node( 15,  67.0    , 160)
    model.node( 16,   0.0    ,  90)
    model.node( 17,  26.2595 , 117.435)
    model.node( 18,  30.0    ,  50)
    model.node( 19,  20.0    ,  50)
    model.node( 20,  10.0    ,  50)
    model.node( 21,   5.0    ,  40)
    model.node( 22,  10.0    ,  30)
    model.node( 23,  15.0    ,  20)
    model.node( 24,  30.0    ,   5)
    model.node( 25,  40.0    ,  10)
    model.node( 26,  40.0    ,  20)
    model.node( 27,  40.0    ,  30)
    model.node( 28,  40.0    ,  40)
    model.node( 29,  49.2519 ,  79.4871)
    model.node( 30,  43.5038 ,  88.9741)
    model.node( 31,  37.7557 ,  98.4612)
    model.node( 32,  32.0076 , 107.948)
    model.node( 33,  19.6947 , 110.577)
    model.node( 34,  13.1298 , 103.718)
    model.node( 35,   6.56489,  96.8588)
    model.node( 36,   0.0    ,  80.0   )
    model.node( 37,   0.0    ,  70.0   )
    model.node( 38,   0.0    ,  60.0   )
    model.node( 39,  47.5    ,  60.0   )
    model.node( 40,  99.0    , 160.0   )
    model.node( 41,  83.0    , 160.0   )
    model.node( 42,  58.8519 , 151.487 )
    model.node( 43,  50.7038 , 142.974 )
    model.node( 44,  42.5557 , 134.461 )
    model.node( 45,  34.4076 , 125.948 )
    model.node( 46,  68.3333 ,  70.0   )
    model.node( 47,  81.6667 ,  70.0   )
    model.node( 48, 107.0    ,  74.0   )
    model.node( 49, 119.0    ,  78.0   )
    model.node( 50, 131.0    ,  82.0   )
    model.node( 51, 143.0    ,  86.0   )
    model.node( 52, 149.286  , 100.0   )
    model.node( 53, 143.571  , 110.0   )
    model.node( 54, 137.857  , 120.0   )
    model.node( 55, 132.143  , 130.0   )
    model.node( 56, 126.429  , 140.0   )
    model.node( 57, 120.714  , 150.0   )
    model.node( 58, 125.0    ,  50.0   )
    model.node( 59, 135.0    ,  50.0   )
    model.node( 60, 145.0    ,  50.0   )
    model.node( 61, 155.0    ,  63.3333)
    model.node( 62, 155.0    ,  76.6667)
    model.node( 63, 105.0    ,  60)
    model.node( 64, 115.0    ,  40)
    model.node( 65, 115.0    ,  30)
    model.node( 66, 115.0    ,  20)
    model.node( 67, 115.0    ,  10)
    model.node( 68, 125.0    ,   5)
    model.node( 69, 140.0    ,  20)
    model.node( 70, 145.0    ,  30)
    model.node( 71, 150.0    ,  40)
    model.node( 72, 118.929  , 177.429)
    model.node( 73, 122.857  , 194.857)
    model.node( 74, 126.786  , 212.286)
    model.node( 75, 130.714  , 229.714)
    model.node( 76, 134.643  , 247.143)
    model.node( 77, 138.571  , 264.571)
    model.node( 78, 142.5    , 282)
    model.node( 79, 146.429  , 299.429)
    model.node( 80, 150.357  , 316.857)
    model.node( 81, 154.286  , 334.286)
    model.node( 82, 158.214  , 351.714)
    model.node( 83, 162.143  , 369.143)
    model.node( 84, 166.071  , 386.571)
    model.node( 85, 154      , 404)
    model.node( 86, 138      , 404)
    model.node( 87, 118.071  , 386.571)
    model.node( 88, 114.143  , 369.143)
    model.node( 89, 110.214  , 351.714)
    model.node( 90, 106.286  , 334.286)
    model.node( 91, 102.357  , 316.857)
    model.node( 92,  98.4286 , 299.429)
    model.node( 93,  94.5    , 282)
    model.node( 94,  90.5714 , 264.571)
    model.node( 95,  86.6429 , 247.143)
    model.node( 96,  82.7143 , 229.714)
    model.node( 97,  78.7857 , 212.286)
    model.node( 98,  74.8571 , 194.857)
    model.node( 99,  70.9286 , 177.429)
    model.node(100,  15.8281 ,  41.1347)
    model.node(101,  21.1837 ,  32.5994)
    model.node(102,  29.506  ,  38.2678)
    model.node(103,  23.4558 ,  21.9638)
    model.node(104,  31.778  ,  27.6323)
    model.node(105,  30.8991 ,  14.8505)
    model.node(106,  24.9546 , 101.66)
    model.node(107,  14.9486 ,  93.5215)
    model.node(108,  25.3499 ,  89.7387)
    model.node(109,  35.7513 ,  85.9558)
    model.node(110,  11.0391 ,  83.1662)
    model.node(111,  21.4404 ,  79.3834)
    model.node(112,  31.8418 ,  75.6006)
    model.node(113,  42.2431 ,  71.8177)
    model.node(114,  12.8673 ,  70.7242)
    model.node(115,  23.2687 ,  66.9414)
    model.node(116,  33.67   ,  63.1585)
    model.node(117,  11.8878 ,  59.3033)
    model.node(118,  40.8546 , 110.492)
    model.node(119,  43.2864 , 122.454)
    model.node(120,  50.9941 ,  99.0945)
    model.node(121,  53.4259 , 111.057)
    model.node(122,  55.8578 , 123.019)
    model.node(123,  58.2896 , 134.981)
    model.node(124,  59.4604 ,  79.4672)
    model.node(125,  61.8922 ,  91.4292)
    model.node(126,  64.3241 , 103.391)
    model.node(127,  66.7559 , 115.353)
    model.node(128,  69.1878 , 127.316)
    model.node(129,  71.6196 , 139.278)
    model.node(130,  74.0514 , 151.24)
    model.node(131,  71.845  ,  79.1137)
    model.node(132,  74.2769 ,  91.0758)
    model.node(133,  76.7087 , 103.038)
    model.node(134,  79.1405 , 115.0  )
    model.node(135,  81.5724 , 126.962)
    model.node(136,  84.0042 , 138.924)
    model.node(137,  86.4361 , 150.886)
    model.node(138,  84.3015 ,  79.1137)
    model.node(139,  86.7333 ,  91.0758)
    model.node(140,  89.1652 , 103.038)
    model.node(141,  91.597  , 115.0  )
    model.node(142,  94.0289 , 126.962)
    model.node(143,  96.4607 , 138.924)
    model.node(144,  98.8925 , 150.886)
    model.node(145,  97.8941 ,  84.7022)
    model.node(146, 100.326  ,  96.6643)
    model.node(147, 102.758  , 108.626)
    model.node(148, 105.19   , 120.588)
    model.node(149, 107.621  , 132.551)
    model.node(150, 110.053  , 144.513)
    model.node(151, 110.385  ,  84.8709)
    model.node(152, 112.817  ,  96.833)
    model.node(153, 115.249  , 108.795)
    model.node(154, 117.68   , 120.757)
    model.node(155, 120.112  , 132.719)
    model.node(156, 124.092  ,  91.0207)
    model.node(157, 126.523  , 102.983)
    model.node(158, 128.955  , 114.945)
    model.node(159, 137.798  ,  97.1705)
    model.node(160, 146.214  ,  77.4792)
    model.node(161, 135.111  ,  72.1423)
    model.node(162, 138.975  ,  60.5485)
    model.node(163, 124.805  ,  64.4131)
    model.node(164, 111.384  ,  66.0303)
    model.node(165, 139.172  ,  41.1347)
    model.node(166, 125.494  ,  38.2678)
    model.node(167, 133.816  ,  32.5994)
    model.node(168, 123.222  ,  27.6323)
    model.node(169, 131.544  ,  21.9638)
    model.node(170, 124.101  ,  14.8505)
    model.node(171, 149.305  , 390.219)
    model.node(172, 131.304  , 377.944)
    model.node(173, 147.729  , 372.527)
    model.node(174, 127.482  , 360.993)
    model.node(175, 143.908  , 355.575)
    model.node(176, 123.661  , 344.041)
    model.node(177, 140.087  , 338.623)
    model.node(178, 119.8400 , 327.089)
    model.node(179, 136.2650 , 321.671)
    model.node(180, 116.0190 , 310.137)
    model.node(181, 132.4440 , 304.719)
    model.node(182, 112.1980 , 293.185)
    model.node(183, 128.6230 , 287.767)
    model.node(184, 108.3770 , 276.233)
    model.node(185, 124.8020 , 270.815)
    model.node(186, 104.5560 , 259.281)
    model.node(187, 120.9810 , 253.863)
    model.node(188, 100.7350 , 242.329)
    model.node(189, 117.1600 , 236.911)
    model.node(190,  96.9134 , 225.377)
    model.node(191, 113.3390 , 219.959)
    model.node(192,  93.0922 , 208.425)
    model.node(193, 109.5180 , 203.007)
    model.node(194,  89.2711 , 191.473)
    model.node(195, 105.6960 , 186.056)
    model.node(196,  87.6948 , 173.781)

    # Constraints
    model.fix(4, 1, 1)
    model.fix(8, 1, 1)

    # CSTPlaneStress elements
    thick = 10.0
    cond  = "PlaneStrain"

    model.element("Tri31",   1, (100,101,102), thick, cond, 1)
    model.element("Tri31",   2, (101,103,104), thick, cond, 1)
    model.element("Tri31",   3, (102,101,104), thick, cond, 1)
    model.element("Tri31",   4, (104,103,105), thick, cond, 1)
    model.element("Tri31",   5, ( 20,100, 19), thick, cond, 1)
    model.element("Tri31",   6, (  1, 21, 20), thick, cond, 1)
    model.element("Tri31",   7, ( 21,100, 20), thick, cond, 1)
    model.element("Tri31",   8, ( 22,100, 21), thick, cond, 1)
    model.element("Tri31",   9, ( 22,101,100), thick, cond, 1)
    model.element("Tri31",  10, ( 23,101, 22), thick, cond, 1)
    model.element("Tri31",  11, ( 23,103,101), thick, cond, 1)
    model.element("Tri31",  12, (  2,103, 23), thick, cond, 1)
    model.element("Tri31",  13, (  2,105,103), thick, cond, 1)
    model.element("Tri31",  14, ( 24,105,  2), thick, cond, 1)
    model.element("Tri31",  15, (  3, 25, 24), thick, cond, 1)
    model.element("Tri31",  16, ( 25,105, 24), thick, cond, 1)
    model.element("Tri31",  17, ( 26,105, 25), thick, cond, 1)
    model.element("Tri31",  18, ( 26,104,105), thick, cond, 1)
    model.element("Tri31",  19, ( 27,104, 26), thick, cond, 1)
    model.element("Tri31",  20, ( 27,102,104), thick, cond, 1)
    model.element("Tri31",  21, ( 28,102, 27), thick, cond, 1)
    model.element("Tri31",  22, (  4, 18, 28), thick, cond, 1)
    model.element("Tri31",  23, ( 18,102, 28), thick, cond, 1)
    model.element("Tri31",  24, ( 19,102, 18), thick, cond, 1)
    model.element("Tri31",  25, ( 19,100,102), thick, cond, 1)
    model.element("Tri31",  26, (106,107,108), thick, cond, 1)
    model.element("Tri31",  27, (107,110,111), thick, cond, 1)
    model.element("Tri31",  28, (108,107,111), thick, cond, 1)
    model.element("Tri31",  29, (108,111,112), thick, cond, 1)
    model.element("Tri31",  30, (109,108,112), thick, cond, 1)
    model.element("Tri31",  31, (109,112,113), thick, cond, 1)
    model.element("Tri31",  32, (111,110,114), thick, cond, 1)
    model.element("Tri31",  33, (111,114,115), thick, cond, 1)
    model.element("Tri31",  34, (112,111,115), thick, cond, 1)
    model.element("Tri31",  35, (112,115,116), thick, cond, 1)
    model.element("Tri31",  36, (113,112,116), thick, cond, 1)
    model.element("Tri31",  37, (115,114,117), thick, cond, 1)
    model.element("Tri31",  38, ( 17, 33, 32), thick, cond, 1)
    model.element("Tri31",  39, ( 33,106, 32), thick, cond, 1)
    model.element("Tri31",  40, ( 34,106, 33), thick, cond, 1)
    model.element("Tri31",  41, ( 34,107,106), thick, cond, 1)
    model.element("Tri31",  42, ( 35,107, 34), thick, cond, 1)
    model.element("Tri31",  43, ( 35,110,107), thick, cond, 1)
    model.element("Tri31",  44, ( 16,110, 35), thick, cond, 1)
    model.element("Tri31",  45, ( 36,110, 16), thick, cond, 1)
    model.element("Tri31",  46, ( 36,114,110), thick, cond, 1)
    model.element("Tri31",  47, ( 37,114, 36), thick, cond, 1)
    model.element("Tri31",  48, ( 37,117,114), thick, cond, 1)
    model.element("Tri31",  49, ( 38,117, 37), thick, cond, 1)
    model.element("Tri31",  50, (  1, 20, 38), thick, cond, 1)
    model.element("Tri31",  51, ( 20,117, 38), thick, cond, 1)
    model.element("Tri31",  52, ( 19,117, 20), thick, cond, 1)
    model.element("Tri31",  53, ( 19,115,117), thick, cond, 1)
    model.element("Tri31",  54, ( 18,115, 19), thick, cond, 1)
    model.element("Tri31",  55, ( 18,116,115), thick, cond, 1)
    model.element("Tri31",  56, (  4,116, 18), thick, cond, 1)
    model.element("Tri31",  57, ( 39,116,  4), thick, cond, 1)
    model.element("Tri31",  58, ( 39,113,116), thick, cond, 1)
    model.element("Tri31",  59, (  5,113, 39), thick, cond, 1)
    model.element("Tri31",  60, ( 29,113,  5), thick, cond, 1)
    model.element("Tri31",  61, ( 29,109,113), thick, cond, 1)
    model.element("Tri31",  62, ( 30,109, 29), thick, cond, 1)
    model.element("Tri31",  63, ( 31,109, 30), thick, cond, 1)
    model.element("Tri31",  64, ( 31,108,109), thick, cond, 1)
    model.element("Tri31",  65, ( 31,106,108), thick, cond, 1)
    model.element("Tri31",  66, ( 32,106, 31), thick, cond, 1)
    model.element("Tri31",  67, (118,120,121), thick, cond, 1)
    model.element("Tri31",  68, (119,118,121), thick, cond, 1)
    model.element("Tri31",  69, (119,121,122), thick, cond, 1)
    model.element("Tri31",  70, (120,125,126), thick, cond, 1)
    model.element("Tri31",  71, (121,120,126), thick, cond, 1)
    model.element("Tri31",  72, (121,126,127), thick, cond, 1)
    model.element("Tri31",  73, (122,121,127), thick, cond, 1)
    model.element("Tri31",  74, (122,127,128), thick, cond, 1)
    model.element("Tri31",  75, (123,122,128), thick, cond, 1)
    model.element("Tri31",  76, (123,128,129), thick, cond, 1)
    model.element("Tri31",  77, (125,124,131), thick, cond, 1)
    model.element("Tri31",  78, (125,131,132), thick, cond, 1)
    model.element("Tri31",  79, (126,125,132), thick, cond, 1)
    model.element("Tri31",  80, (126,132,133), thick, cond, 1)
    model.element("Tri31",  81, (127,126,133), thick, cond, 1)
    model.element("Tri31",  82, (127,133,134), thick, cond, 1)
    model.element("Tri31",  83, (128,127,134), thick, cond, 1)
    model.element("Tri31",  84, (128,134,135), thick, cond, 1)
    model.element("Tri31",  85, (129,128,135), thick, cond, 1)
    model.element("Tri31",  86, (129,135,136), thick, cond, 1)
    model.element("Tri31",  87, (130,129,136), thick, cond, 1)
    model.element("Tri31",  88, (130,136,137), thick, cond, 1)
    model.element("Tri31",  89, (132,131,138), thick, cond, 1)
    model.element("Tri31",  90, (132,138,139), thick, cond, 1)
    model.element("Tri31",  91, (133,132,139), thick, cond, 1)
    model.element("Tri31",  92, (133,139,140), thick, cond, 1)
    model.element("Tri31",  93, (134,133,140), thick, cond, 1)
    model.element("Tri31",  94, (134,140,141), thick, cond, 1)
    model.element("Tri31",  95, (135,134,141), thick, cond, 1)
    model.element("Tri31",  96, (135,141,142), thick, cond, 1)
    model.element("Tri31",  97, (136,135,142), thick, cond, 1)
    model.element("Tri31",  98, (136,142,143), thick, cond, 1)
    model.element("Tri31",  99, (137,136,143), thick, cond, 1)
    model.element("Tri31", 100, (137,143,144), thick, cond, 1)
    model.element("Tri31", 101, (139,138,145), thick, cond, 1)
    model.element("Tri31", 102, (139,145,146), thick, cond, 1)
    model.element("Tri31", 103, (140,139,146), thick, cond, 1)
    model.element("Tri31", 104, (140,146,147), thick, cond, 1)
    model.element("Tri31", 105, (141,140,147), thick, cond, 1)
    model.element("Tri31", 106, (141,147,148), thick, cond, 1)
    model.element("Tri31", 107, (142,141,148), thick, cond, 1)
    model.element("Tri31", 108, (142,148,149), thick, cond, 1)
    model.element("Tri31", 109, (143,142,149), thick, cond, 1)
    model.element("Tri31", 110, (143,149,150), thick, cond, 1)
    model.element("Tri31", 111, (144,143,150), thick, cond, 1)
    model.element("Tri31", 112, (146,145,151), thick, cond, 1)
    model.element("Tri31", 113, (146,151,152), thick, cond, 1)
    model.element("Tri31", 114, (147,146,152), thick, cond, 1)
    model.element("Tri31", 115, (147,152,153), thick, cond, 1)
    model.element("Tri31", 116, (148,147,153), thick, cond, 1)
    model.element("Tri31", 117, (148,153,154), thick, cond, 1)
    model.element("Tri31", 118, (149,148,154), thick, cond, 1)
    model.element("Tri31", 119, (149,154,155), thick, cond, 1)
    model.element("Tri31", 120, (150,149,155), thick, cond, 1)
    model.element("Tri31", 121, (152,151,156), thick, cond, 1)
    model.element("Tri31", 122, (152,156,157), thick, cond, 1)
    model.element("Tri31", 123, (153,152,157), thick, cond, 1)
    model.element("Tri31", 124, (153,157,158), thick, cond, 1)
    model.element("Tri31", 125, (154,153,158), thick, cond, 1)
    model.element("Tri31", 126, (157,156,159), thick, cond, 1)
    model.element("Tri31", 127, ( 31,118, 32), thick, cond, 1)
    model.element("Tri31", 128, ( 31,120,118), thick, cond, 1)
    model.element("Tri31", 129, ( 30,120, 31), thick, cond, 1)
    model.element("Tri31", 130, ( 30,125,120), thick, cond, 1)
    model.element("Tri31", 131, ( 29,125, 30), thick, cond, 1)
    model.element("Tri31", 132, ( 29,124,125), thick, cond, 1)
    model.element("Tri31", 133, (  5,124, 29), thick, cond, 1)
    model.element("Tri31", 134, ( 46,124,  5), thick, cond, 1)
    model.element("Tri31", 135, ( 46,131,124), thick, cond, 1)
    model.element("Tri31", 136, ( 47,131, 46), thick, cond, 1)
    model.element("Tri31", 137, ( 47,138,131), thick, cond, 1)
    model.element("Tri31", 138, (  6,138, 47), thick, cond, 1)
    model.element("Tri31", 139, (  6,145,138), thick, cond, 1)
    model.element("Tri31", 140, ( 48,145,  6), thick, cond, 1)
    model.element("Tri31", 141, ( 48,151,145), thick, cond, 1)
    model.element("Tri31", 142, ( 49,151, 48), thick, cond, 1)
    model.element("Tri31", 143, ( 49,156,151), thick, cond, 1)
    model.element("Tri31", 144, ( 50,156, 49), thick, cond, 1)
    model.element("Tri31", 145, ( 50,159,156), thick, cond, 1)
    model.element("Tri31", 146, ( 51,159, 50), thick, cond, 1)
    model.element("Tri31", 147, ( 11, 52, 51), thick, cond, 1)
    model.element("Tri31", 148, ( 52,159, 51), thick, cond, 1)
    model.element("Tri31", 149, ( 53,159, 52), thick, cond, 1)
    model.element("Tri31", 150, ( 53,157,159), thick, cond, 1)
    model.element("Tri31", 151, ( 53,158,157), thick, cond, 1)
    model.element("Tri31", 152, ( 54,158, 53), thick, cond, 1)
    model.element("Tri31", 153, ( 55,158, 54), thick, cond, 1)
    model.element("Tri31", 154, ( 55,154,158), thick, cond, 1)
    model.element("Tri31", 155, ( 55,155,154), thick, cond, 1)
    model.element("Tri31", 156, ( 56,155, 55), thick, cond, 1)
    model.element("Tri31", 157, ( 56,150,155), thick, cond, 1)
    model.element("Tri31", 158, ( 57,150, 56), thick, cond, 1)
    model.element("Tri31", 159, ( 12,150, 57), thick, cond, 1)
    model.element("Tri31", 160, ( 12,144,150), thick, cond, 1)
    model.element("Tri31", 161, ( 40,144, 12), thick, cond, 1)
    model.element("Tri31", 162, ( 40,137,144), thick, cond, 1)
    model.element("Tri31", 163, ( 41,137, 40), thick, cond, 1)
    model.element("Tri31", 164, ( 41,130,137), thick, cond, 1)
    model.element("Tri31", 165, ( 15,130, 41), thick, cond, 1)
    model.element("Tri31", 166, ( 42,130, 15), thick, cond, 1)
    model.element("Tri31", 167, ( 42,129,130), thick, cond, 1)
    model.element("Tri31", 168, ( 42,123,129), thick, cond, 1)
    model.element("Tri31", 169, ( 43,123, 42), thick, cond, 1)
    model.element("Tri31", 170, ( 44,123, 43), thick, cond, 1)
    model.element("Tri31", 171, ( 44,122,123), thick, cond, 1)
    model.element("Tri31", 172, ( 44,119,122), thick, cond, 1)
    model.element("Tri31", 173, ( 45,119, 44), thick, cond, 1)
    model.element("Tri31", 174, ( 45,118,119), thick, cond, 1)
    model.element("Tri31", 175, ( 17,118, 45), thick, cond, 1)
    model.element("Tri31", 176, ( 32,118, 17), thick, cond, 1)
    model.element("Tri31", 177, (162,161,163), thick, cond, 1)
    model.element("Tri31", 178, ( 11,160, 62), thick, cond, 1)
    model.element("Tri31", 179, ( 51,160, 11), thick, cond, 1)
    model.element("Tri31", 180, ( 50,160, 51), thick, cond, 1)
    model.element("Tri31", 181, ( 50,161,160), thick, cond, 1)
    model.element("Tri31", 182, ( 49,161, 50), thick, cond, 1)
    model.element("Tri31", 183, ( 49,163,161), thick, cond, 1)
    model.element("Tri31", 184, ( 49,164,163), thick, cond, 1)
    model.element("Tri31", 185, ( 48,164, 49), thick, cond, 1)
    model.element("Tri31", 186, (  6, 63, 48), thick, cond, 1)
    model.element("Tri31", 187, ( 63,164, 48), thick, cond, 1)
    model.element("Tri31", 188, (  7,164, 63), thick, cond, 1)
    model.element("Tri31", 189, (  7,163,164), thick, cond, 1)
    model.element("Tri31", 190, ( 58,163,  7), thick, cond, 1)
    model.element("Tri31", 191, ( 59,163, 58), thick, cond, 1)
    model.element("Tri31", 192, ( 59,162,163), thick, cond, 1)
    model.element("Tri31", 193, ( 60,162, 59), thick, cond, 1)
    model.element("Tri31", 194, ( 10, 61, 60), thick, cond, 1)
    model.element("Tri31", 195, ( 61,162, 60), thick, cond, 1)
    model.element("Tri31", 196, ( 61,160,162), thick, cond, 1)
    model.element("Tri31", 197, (162,160,161), thick, cond, 1)
    model.element("Tri31", 198, ( 62,160, 61), thick, cond, 1)
    model.element("Tri31", 199, (165,166,167), thick, cond, 1)
    model.element("Tri31", 200, (167,166,168), thick, cond, 1)
    model.element("Tri31", 201, (167,168,169), thick, cond, 1)
    model.element("Tri31", 202, (169,168,170), thick, cond, 1)
    model.element("Tri31", 203, ( 59,166,165), thick, cond, 1)
    model.element("Tri31", 204, ( 58,166, 59), thick, cond, 1)
    model.element("Tri31", 205, (  7, 64, 58), thick, cond, 1)
    model.element("Tri31", 206, ( 64,166, 58), thick, cond, 1)
    model.element("Tri31", 207, ( 65,166, 64), thick, cond, 1)
    model.element("Tri31", 208, ( 65,168,166), thick, cond, 1)
    model.element("Tri31", 209, ( 66,168, 65), thick, cond, 1)
    model.element("Tri31", 210, ( 66,170,168), thick, cond, 1)
    model.element("Tri31", 211, ( 67,170, 66), thick, cond, 1)
    model.element("Tri31", 212, (  8, 68, 67), thick, cond, 1)
    model.element("Tri31", 213, ( 68,170, 67), thick, cond, 1)
    model.element("Tri31", 214, (  9,170, 68), thick, cond, 1)
    model.element("Tri31", 215, (  9,169,170), thick, cond, 1)
    model.element("Tri31", 216, ( 69,169,  9), thick, cond, 1)
    model.element("Tri31", 217, ( 69,167,169), thick, cond, 1)
    model.element("Tri31", 218, ( 70,167, 69), thick, cond, 1)
    model.element("Tri31", 219, ( 70,165,167), thick, cond, 1)
    model.element("Tri31", 220, ( 71,165, 70), thick, cond, 1)
    model.element("Tri31", 221, ( 10, 60, 71), thick, cond, 1)
    model.element("Tri31", 222, ( 60,165, 71), thick, cond, 1)
    model.element("Tri31", 223, ( 59,165, 60), thick, cond, 1)
    model.element("Tri31", 224, (171,172,173), thick, cond, 1)
    model.element("Tri31", 225, (173,172,174), thick, cond, 1)
    model.element("Tri31", 226, (173,174,175), thick, cond, 1)
    model.element("Tri31", 227, (175,174,176), thick, cond, 1)
    model.element("Tri31", 228, (175,176,177), thick, cond, 1)
    model.element("Tri31", 229, (177,176,178), thick, cond, 1)
    model.element("Tri31", 230, (177,178,179), thick, cond, 1)
    model.element("Tri31", 231, (179,178,180), thick, cond, 1)
    model.element("Tri31", 232, (179,180,181), thick, cond, 1)
    model.element("Tri31", 233, (181,180,182), thick, cond, 1)
    model.element("Tri31", 234, (181,182,183), thick, cond, 1)
    model.element("Tri31", 235, (183,182,184), thick, cond, 1)
    model.element("Tri31", 236, (183,184,185), thick, cond, 1)
    model.element("Tri31", 237, (185,184,186), thick, cond, 1)
    model.element("Tri31", 238, (185,186,187), thick, cond, 1)
    model.element("Tri31", 239, (187,186,188), thick, cond, 1)
    model.element("Tri31", 240, (187,188,189), thick, cond, 1)
    model.element("Tri31", 241, (189,188,190), thick, cond, 1)
    model.element("Tri31", 242, (189,190,191), thick, cond, 1)
    model.element("Tri31", 243, (191,190,192), thick, cond, 1)
    model.element("Tri31", 244, (191,192,193), thick, cond, 1)
    model.element("Tri31", 245, (193,192,194), thick, cond, 1)
    model.element("Tri31", 246, (193,194,195), thick, cond, 1)
    model.element("Tri31", 247, (195,194,196), thick, cond, 1)
    model.element("Tri31", 248, ( 86,171, 85), thick, cond, 1)
    model.element("Tri31", 249, ( 86,172,171), thick, cond, 1)
    model.element("Tri31", 250, ( 14, 87, 86), thick, cond, 1)
    model.element("Tri31", 251, ( 87,172, 86), thick, cond, 1)
    model.element("Tri31", 252, ( 88,172, 87), thick, cond, 1)
    model.element("Tri31", 253, ( 88,174,172), thick, cond, 1)
    model.element("Tri31", 254, ( 89,174, 88), thick, cond, 1)
    model.element("Tri31", 255, ( 89,176,174), thick, cond, 1)
    model.element("Tri31", 256, ( 90,176, 89), thick, cond, 1)
    model.element("Tri31", 257, ( 90,178,176), thick, cond, 1)
    model.element("Tri31", 258, ( 91,178, 90), thick, cond, 1)
    model.element("Tri31", 259, ( 91,180,178), thick, cond, 1)
    model.element("Tri31", 260, ( 92,180, 91), thick, cond, 1)
    model.element("Tri31", 261, ( 92,182,180), thick, cond, 1)
    model.element("Tri31", 262, ( 93,182, 92), thick, cond, 1)
    model.element("Tri31", 263, ( 93,184,182), thick, cond, 1)
    model.element("Tri31", 264, ( 94,184, 93), thick, cond, 1)
    model.element("Tri31", 265, ( 94,186,184), thick, cond, 1)
    model.element("Tri31", 266, ( 95,186, 94), thick, cond, 1)
    model.element("Tri31", 267, ( 95,188,186), thick, cond, 1)
    model.element("Tri31", 268, ( 96,188, 95), thick, cond, 1)
    model.element("Tri31", 269, ( 96,190,188), thick, cond, 1)
    model.element("Tri31", 270, ( 97,190, 96), thick, cond, 1)
    model.element("Tri31", 271, ( 97,192,190), thick, cond, 1)
    model.element("Tri31", 272, ( 98,192, 97), thick, cond, 1)
    model.element("Tri31", 273, ( 98,194,192), thick, cond, 1)
    model.element("Tri31", 274, ( 99,194, 98), thick, cond, 1)
    model.element("Tri31", 275, ( 99,196,194), thick, cond, 1)
    model.element("Tri31", 276, ( 15, 41, 99), thick, cond, 1)
    model.element("Tri31", 277, ( 41,196, 99), thick, cond, 1)
    model.element("Tri31", 278, ( 40,196, 41), thick, cond, 1)
    model.element("Tri31", 279, ( 40,195,196), thick, cond, 1)
    model.element("Tri31", 280, ( 12, 72, 40), thick, cond, 1)
    model.element("Tri31", 281, ( 72,195, 40), thick, cond, 1)
    model.element("Tri31", 282, ( 73,195, 72), thick, cond, 1)
    model.element("Tri31", 283, ( 73,193,195), thick, cond, 1)
    model.element("Tri31", 284, ( 74,193, 73), thick, cond, 1)
    model.element("Tri31", 285, ( 74,191,193), thick, cond, 1)
    model.element("Tri31", 286, ( 75,191, 74), thick, cond, 1)
    model.element("Tri31", 287, ( 75,189,191), thick, cond, 1)
    model.element("Tri31", 288, ( 76,189, 75), thick, cond, 1)
    model.element("Tri31", 289, ( 76,187,189), thick, cond, 1)
    model.element("Tri31", 290, ( 77,187, 76), thick, cond, 1)
    model.element("Tri31", 291, ( 77,185,187), thick, cond, 1)
    model.element("Tri31", 292, ( 78,185, 77), thick, cond, 1)
    model.element("Tri31", 293, ( 78,183,185), thick, cond, 1)
    model.element("Tri31", 294, ( 79,183, 78), thick, cond, 1)
    model.element("Tri31", 295, ( 79,181,183), thick, cond, 1)
    model.element("Tri31", 296, ( 80,181, 79), thick, cond, 1)
    model.element("Tri31", 297, ( 80,179,181), thick, cond, 1)
    model.element("Tri31", 298, ( 81,179, 80), thick, cond, 1)
    model.element("Tri31", 299, ( 81,177,179), thick, cond, 1)
    model.element("Tri31", 300, ( 82,177, 81), thick, cond, 1)
    model.element("Tri31", 301, ( 82,175,177), thick, cond, 1)
    model.element("Tri31", 302, ( 83,175, 82), thick, cond, 1)
    model.element("Tri31", 303, ( 83,173,175), thick, cond, 1)
    model.element("Tri31", 304, ( 84,173, 83), thick, cond, 1)
    model.element("Tri31", 305, ( 84,171,173), thick, cond, 1)
    model.element("Tri31", 306, ( 13, 85, 84), thick, cond, 1)
    model.element("Tri31", 307, ( 85,171, 84), thick, cond, 1)

    # force at node 14
    model.pattern("Plain", 1, "Linear", load = {14:  [700 , 0, 0]})

    return model


if __name__ == "__main__":
    model = create_wrench()
    model.print("-json")

